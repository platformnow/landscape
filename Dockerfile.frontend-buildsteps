# Stage 1 - Create yarn install skeleton layer
ARG BUILD_PLATFORM=linux/amd64
ARG APP_CONFIG_FILE="app-config.frontend-production.yaml"

FROM --platform=$BUILD_PLATFORM node:16-bullseye-slim AS packages


WORKDIR /app
COPY package.json yarn.lock ./

COPY packages packages

# Comment this out if you don't have any internal plugins
COPY plugins plugins

RUN find packages \! -name "package.json" -mindepth 2 -maxdepth 2 -exec rm -rf {} \+

# Stage 2 - Install dependencies and build packages
FROM --platform=$BUILD_PLATFORM node:16-bullseye-slim AS build

ARG APP_CONFIG_FILE

WORKDIR /app
COPY --from=packages /app .

RUN yarn install --frozen-lockfile --network-timeout 600000 && rm -rf "$(yarn cache dir)"

COPY . .

RUN yarn tsc

RUN yarn workspace app build --config ../../$APP_CONFIG_FILE
# If you have not yet migrated to package roles, use the following command instead:
# RUN yarn --cwd packages/backend backstage-cli backend:bundle --build-dependencies

# Stage 3 - Build the actual backend image and install production dependencies
FROM --platform=$BUILD_PLATFORM nginx:mainline

RUN apt-get update && apt-get -y install jq && rm -rf /var/lib/apt/lists/*

COPY --from=build /app/packages/app/dist /usr/share/nginx/html
COPY docker/default.conf.template /etc/nginx/templates/default.conf.template

COPY docker/inject-config.sh /docker-entrypoint.d/40-inject-config.sh

ENV PORT 80
